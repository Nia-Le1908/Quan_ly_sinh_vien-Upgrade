package dao;

import model.SinhVien;
import util.DBConnection;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;

import java.sql.*;

public class SinhVienDAO {

    /**
     * L·∫•y to√†n b·ªô danh s√°ch sinh vi√™n, ƒë·ªìng th·ªùi t√≠nh to√°n s·∫µn ƒëi·ªÉm t√≠ch l≈©y h·ªá 4.
     * C√°ch l√†m n√†y hi·ªáu qu·∫£ h∆°n nhi·ªÅu so v·ªõi vi·ªác g·ªçi v√†o CSDL cho t·ª´ng sinh vi√™n.
     */
    public static ObservableList<SinhVien> getAllSinhVien() {
        System.out.println("üì° ƒêang t·∫£i d·ªØ li·ªáu sinh vi√™n t·ª´ MySQL...");
        ObservableList<SinhVien> list = FXCollections.observableArrayList();
        
        // C√¢u l·ªánh SQL ph·ª©c t·∫°p h∆°n ƒë·ªÉ t√≠nh ƒëi·ªÉm t√≠ch l≈©y ngay t·∫°i CSDL
        String sql = "SELECT sv.*, COALESCE(gpa.diemTichLuyHe4, 0) AS diemTichLuy " +
                     "FROM sinhvien sv " +
                     "LEFT JOIN (" +
                     "    SELECT bd.maSV, " +
                     "           SUM(" +
                     "               CASE " +
                     "                   WHEN bd.diemTB >= 8.5 THEN 4.0 " +
                     "                   WHEN bd.diemTB >= 8.0 THEN 3.5 " +
                     "                   WHEN bd.diemTB >= 7.0 THEN 3.0 " +
                     "                   WHEN bd.diemTB >= 6.5 THEN 2.5 " +
                     "                   WHEN bd.diemTB >= 5.5 THEN 2.0 " +
                     "                   WHEN bd.diemTB >= 5.0 THEN 1.5 " +
                     "                   WHEN bd.diemTB >= 4.0 THEN 1.0 " +
                     "                   ELSE 0.0 " +
                     "               END * mh.soTinChi" +
                     "           ) / SUM(CASE WHEN bd.diemTB >= 4.0 THEN mh.soTinChi ELSE 0 END) AS diemTichLuyHe4 " +
                     "    FROM bangdiem bd " +
                     "    JOIN monhoc mh ON bd.maMon = mh.maMon " +
                     "    WHERE bd.diemTB >= 4.0 " +
                     "    GROUP BY bd.maSV" +
                     ") AS gpa ON sv.maSV = gpa.maSV";

        try (Connection conn = DBConnection.getConnection();
             Statement st = conn.createStatement();
             ResultSet rs = st.executeQuery(sql)) {

            while (rs.next()) {
                SinhVien sv = new SinhVien(
                        rs.getString("maSV"),
                        rs.getString("hoTen"),
                        rs.getDate("ngaySinh") != null ? rs.getDate("ngaySinh").toLocalDate() : null,
                        rs.getString("gioiTinh"),
                        rs.getString("queQuan"),
                        rs.getString("khoa"),
                        rs.getString("lop")
                );
                sv.setDiemTichLuy(rs.getFloat("diemTichLuy")); // G√°n ƒëi·ªÉm t√≠ch l≈©y ƒë√£ t√≠nh
                list.add(sv);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return list;
    }

    // ‚úÖ Th√™m sinh vi√™n
    public static boolean insert(SinhVien sv) {
        String sql = "INSERT INTO sinhvien (maSV, hoTen, ngaySinh, gioiTinh, queQuan, khoa, lop) VALUES (?, ?, ?, ?, ?, ?, ?)";
        try (Connection conn = DBConnection.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql)) {

            ps.setString(1, sv.getMaSV());
            ps.setString(2, sv.getHoTen());
            if (sv.getNgaySinh() != null) {
                ps.setDate(3, java.sql.Date.valueOf(sv.getNgaySinh()));
            } else {
                ps.setNull(3, java.sql.Types.DATE);
            }
            ps.setString(4, sv.getGioiTinh());
            ps.setString(5, sv.getQueQuan());
            ps.setString(6, sv.getKhoa());
            ps.setString(7, sv.getLop());

            return ps.executeUpdate() > 0;
        } catch (SQLIntegrityConstraintViolationException e) {
            System.out.println("‚ö†Ô∏è M√£ sinh vi√™n ƒë√£ t·ªìn t·∫°i!");
        } catch (Exception e) {
            e.printStackTrace();
        }
        return false;
    }

    // ‚úÖ C·∫≠p nh·∫≠t sinh vi√™n
    public static boolean update(SinhVien sv) {
        String sql = "UPDATE sinhvien SET hoTen=?, ngaySinh=?, gioiTinh=?, queQuan=?, khoa=?, lop=? WHERE maSV=?";
        try (Connection conn = DBConnection.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql)) {

            ps.setString(1, sv.getHoTen());
             if (sv.getNgaySinh() != null) {
                ps.setDate(2, java.sql.Date.valueOf(sv.getNgaySinh()));
            } else {
                ps.setNull(2, java.sql.Types.DATE);
            }
            ps.setString(3, sv.getGioiTinh());
            ps.setString(4, sv.getQueQuan());
            ps.setString(5, sv.getKhoa());
            ps.setString(6, sv.getLop());
            ps.setString(7, sv.getMaSV());

            return ps.executeUpdate() > 0;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return false;
    }

    // ‚úÖ X√≥a sinh vi√™n
    public static boolean delete(String maSV) {
        String sql = "DELETE FROM sinhvien WHERE maSV=?";
        try (Connection conn = DBConnection.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql)) {

            ps.setString(1, maSV);
            return ps.executeUpdate() > 0;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return false;
    }
    
    /**
     * L·∫•y danh s√°ch t·∫•t c·∫£ c√°c l·ªõp c√≥ trong CSDL.
     */
    public static ObservableList<String> getAllLop() {
        ObservableList<String> list = FXCollections.observableArrayList();
        String sql = "SELECT DISTINCT lop FROM sinhvien ORDER BY lop";
        try (Connection conn = DBConnection.getConnection();
             Statement st = conn.createStatement();
             ResultSet rs = st.executeQuery(sql)) {
            while (rs.next()) {
                list.add(rs.getString("lop"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return list;
    }
}

